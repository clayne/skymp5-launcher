<Window x:Name="wind" x:Class="UpdatesClient.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:UpdatesClient"
        xmlns:local1="clr-namespace:UpdatesClient.UI.Controllers"
        xmlns:local2="clr-namespace:UpdatesClient.UI.Pages"
        xmlns:local4="clr-namespace:UpdatesClient.UI.Pages.MainWindow"
        xmlns:local5="clr-namespace:UpdatesClient.UI.Pages.MainWindow.Models"
        xmlns:res="clr-namespace:UpdatesClient.Properties" xmlns:sys="clr-namespace:System;assembly=mscorlib"
        mc:Ignorable="d"
        Title="{x:Static res:Resources.Title}" Height="672" Width="1055" ResizeMode="CanMinimize" WindowStyle="None" WindowStartupLocation="CenterScreen"
        d:DataContext="{d:DesignInstance Type=local5:MainWindowModel}" Closing="wind_Closing">
    <Window.Resources>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="Button.Static.Background" Color="#FFDDDDDD"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="#FF707070"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="#FFBEE6FD"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="#FF3C7FB1"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="#FFC4E5F6"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="#FF2C628B"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="#FFF4F4F4"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="#FFADB2B5"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="#FF838383"/>
        <Style x:Key="MenuButtonStyle" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">

                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">

                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">

                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style x:Key="UserMenuButtonStyle1" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <Border.Effect>
                                <DropShadowEffect x:Name="effect" Color="#FF6BC1F2" ShadowDepth="0" BlurRadius="10" Direction="0" Opacity="0"/>
                            </Border.Effect>
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">

                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Opacity" 
                                                             To="1" Duration="0:0:0.15" AccelerationRatio="0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Opacity" 
                                                             To="0" Duration="0:0:0.15" DecelerationRatio="0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Color" 
                                                             To="#FFFBC1F2" Duration="0:0:0.15" AccelerationRatio="0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetName="effect" Storyboard.TargetProperty="Color" 
                                                             To="#FF6BC1F2" Duration="0:0:0.15" DecelerationRatio="0.8" />
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                                <!--<Setter Property="Effect" TargetName="border" Value="{DynamicResource MousePressed}"/>-->
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">

                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="RadioButton.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="RadioButton.Static.Border" Color="#FF707070"/>
        <Style x:Key="OptionMarkFocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="14,0,0,0" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <SolidColorBrush x:Key="RadioButton.IsChecked.Foreground" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="RadioButton.MouseOver.Foreground" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="RadioButton.Disabled.Foreground" Color="#33FFFFFF"/>
        <SolidColorBrush x:Key="RadioButton.Pressed.Foreground" Color="#7FFFFFFF"/>
        <Style x:Key="HeaderRadioButtonStyle" TargetType="{x:Type RadioButton}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource RadioButton.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource RadioButton.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type RadioButton}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition Height="Auto"/>
                            </Grid.RowDefinitions>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="radioButtonBorder" Visibility="Hidden" Grid.Row="1" Fill="{TemplateBinding Background}" HorizontalAlignment="Stretch" Margin="0" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Height="1" Width="Auto"/>
                            <TextBlock x:Name="contentPresenter" Grid.Column="1" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="1,0" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="Center" Text="{TemplateBinding Content}"/>
                        </Grid>
                        <ControlTemplate.Triggers>
                            <!--<Trigger Property="HasContent" Value="true">
                                <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}"/>
                                <Setter Property="Padding" Value="4,-1,0,0"/>
                            </Trigger>-->
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Foreground" TargetName="contentPresenter" Value="{StaticResource RadioButton.MouseOver.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" TargetName="contentPresenter" Value="{StaticResource RadioButton.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Foreground" TargetName="contentPresenter" Value="{StaticResource RadioButton.Pressed.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="true">
                                <Setter Property="Foreground" TargetName="contentPresenter" Value="{StaticResource RadioButton.IsChecked.Foreground}"/>
                                <Setter Property="Visibility" TargetName="radioButtonBorder" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <SolidColorBrush x:Key="OptionMark.Static.Background" Color="#FFFFFFFF"/>
        <SolidColorBrush x:Key="OptionMark.Static.Border" Color="#FF707070"/>

        <Style x:Key="CheckBoxStyleSettings" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image x:Name="checkBoxBorder" Visibility="Visible" Source="{StaticResource Settings}" />
                            <Image x:Name="checkBoxBorderChecked" Visibility="Visible" Source="{StaticResource SettingsChecked}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="checkBoxBorder" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="checkBoxBorderChecked" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="CheckBoxStyleNotify" TargetType="{x:Type CheckBox}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource OptionMark.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource OptionMark.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type CheckBox}">
                        <Grid x:Name="templateRoot" Background="Transparent" SnapsToDevicePixels="True">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Image x:Name="checkBoxBorder" Visibility="Visible" Source="{StaticResource Notifications}" />
                            <Image x:Name="checkBoxBorderChecked" Visibility="Visible" Source="{StaticResource NotificationsChecked}" />
                        </Grid>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="checkBoxBorder" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="False">
                                <Setter TargetName="checkBoxBorderChecked" Property="Visibility" Value="Hidden"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
    </Window.Resources>
    <Window.Background>
        <ImageBrush ImageSource="Assets/Images/Backgrounds/Background1.png" Stretch="UniformToFill"/>
    </Window.Background>
    <Grid x:Name="mainGrid">
        <Grid.Background>
            <LinearGradientBrush EndPoint="0,0.5" StartPoint="1,0.5">
                <GradientStop Color="#00000000"/>
                <GradientStop Color="#77000000" Offset="1"/>
            </LinearGradientBrush>
        </Grid.Background>
        <Grid.RowDefinitions>
            <RowDefinition Height="65"/>
            <RowDefinition/>
        </Grid.RowDefinitions>

        <ContentControl x:Name="content" Grid.Row="1">
            <local4:ServerList />
        </ContentControl>


        <local1:Header  />
        <StackPanel Margin="27,0,331,0" Orientation="Horizontal">
            <RadioButton Content="{x:Static res:Resources.Servers}" IsChecked="True" Foreground="#7FFFFFFF" Style="{DynamicResource HeaderRadioButtonStyle}" Background="#CCFFFFFF" FontSize="16" FontWeight="Bold" Margin="0,0,50,0" Focusable="False" IsTabStop="False"/>
            <RadioButton IsEnabled="False" Content="{x:Static res:Resources.News}" Foreground="#7FFFFFFF" Style="{DynamicResource HeaderRadioButtonStyle}" Background="#CCFFFFFF" FontSize="16" FontWeight="Bold" Margin="0,0,50,0" Focusable="False" IsTabStop="False"/>
            <RadioButton IsEnabled="False" Content="{x:Static res:Resources.Market}" Foreground="#7FFFFFFF" Style="{DynamicResource HeaderRadioButtonStyle}" Background="#CCFFFFFF" FontSize="16" FontWeight="Bold" Margin="0,0,50,0" Focusable="False" IsTabStop="False"/>
        </StackPanel>
        <local4:SettingsPanel x:Name="settingsPanel" HorizontalAlignment="Right" Width="362" Grid.RowSpan="2" RenderTransformOrigin="0.5,0.5" >
            <local4:SettingsPanel.Style>
                <Style TargetType="local4:SettingsPanel">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=IsOpenSettings}">
                            <DataTrigger.Value>
                                <sys:Boolean>True</sys:Boolean>
                            </DataTrigger.Value>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            To="0" Duration="0:0:0.35"
                                            DecelerationRatio="0.995"
                                            Storyboard.TargetProperty="(UIElement.RenderTransform).
                                                (TranslateTransform.X)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Duration="0:0:0.35"
                                            AccelerationRatio="0.955"
                                            Storyboard.TargetProperty="
                                                (UIElement.RenderTransform).
                                                (TranslateTransform.X)"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </local4:SettingsPanel.Style>
            <local4:SettingsPanel.RenderTransform>
                <TranslateTransform
                    X="{Binding ActualWidth, RelativeSource={RelativeSource FindAncestor,
                                        AncestorType=UIElement}}"/>
            </local4:SettingsPanel.RenderTransform>
        </local4:SettingsPanel>
        <StackPanel x:Name="stackUserPanel" HorizontalAlignment="Right" Height="21" Margin="0,23,175,0" VerticalAlignment="Top" ScrollViewer.VerticalScrollBarVisibility="Disabled" Orientation="Horizontal" FlowDirection="RightToLeft">
            <local1:OnlineButton x:Name="userButton" FlowDirection="LeftToRight" Margin="0,0,20,0" />
            <CheckBox HorizontalAlignment="Left" IsChecked="{Binding Path=IsOpenSettings}" VerticalAlignment="Center" Width="17" Style="{StaticResource CheckBoxStyleSettings}" BorderBrush="White" Foreground="White" Height="17" Margin="0,0,20,0" Click="openSettings" Focusable="False" IsTabStop="False"/>
            <Grid HorizontalAlignment="Left" FlowDirection="LeftToRight" VerticalAlignment="Center">
                <CheckBox IsChecked="{Binding Path=OpenNotifications}" HorizontalAlignment="Left" VerticalAlignment="Center" Width="14" Style="{DynamicResource CheckBoxStyleNotify}" BorderBrush="White" Foreground="White" Height="17" Margin="0" Focusable="False" IsTabStop="False"/>
                <Ellipse Visibility="{Binding Path=ShowNewNotification}" Fill="Red" IsHitTestVisible="False" HorizontalAlignment="Right" VerticalAlignment="Top" Width="6" Height="6" />
            </Grid>
        </StackPanel>

        <Grid Grid.RowSpan="2" Visibility="{Binding Path=ShowNotificationsBg}" MouseLeftButtonDown="Grid_MouseLeftButtonDown" Background="#00000000"/>
        <local1:NotifyList x:Name="notifyList" Margin="{Binding MarginNotify}" Visibility="Collapsed" VerticalAlignment="Top" HorizontalAlignment="Right" Width="356" Height="228" Grid.RowSpan="2" >
            <local1:NotifyList.Style>
                <Style TargetType="local1:NotifyList">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding Path=OpenNotifications}">
                            <DataTrigger.Value>
                                <sys:Boolean>True</sys:Boolean>
                            </DataTrigger.Value>
                            <DataTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                        <DoubleAnimation To="1" Duration="0:0:0.15" DecelerationRatio="0.995" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.EnterActions>
                            <DataTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation Duration="0:0:0.35" DecelerationRatio="0.955" To="0" Storyboard.TargetProperty="Opacity" />
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0:0:0.15" Value="{x:Static Visibility.Collapsed}"/>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard>
                            </DataTrigger.ExitActions>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </local1:NotifyList.Style>
        </local1:NotifyList>
        <local1:InfoProblemPanel HorizontalAlignment="Left" VerticalAlignment="Bottom" Height="30" Grid.Row="1" Margin="3,0,0,3"/>

    </Grid>
</Window>
    